<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include ("partials/header") %>
    <title><%=foundStory.title%> | 新增章節</title>
    <link rel="stylesheet"
      href="https://unicons.iconscout.com/release/v4.0.8/css/line.css"
    />

    <style>
      .sortable-list {
        list-style: none;
        background: #fff;
        border:1px solid #a1a1a1;
        width: 450px;
        border-radius: 10px;
        padding: 38px 32px 25px;       
      }
      .sortable-list .item {
        border: 1px solid #ddd;
        display: flex;
        width: 100%;
        border-radius: 5px;
        margin-bottom: 11px;
        align-items: center;
        padding: 10px 5px;
        justify-content: space-between;
      }
      .item .details {
        display: flex;
        align-items: center;
      }
      .item .details img {
        width: 45px;
        height: 45px;
        object-fit: cover;
        border-radius: 5px;
        margin-right: 20px;
      }

      .item .details span {
        font-size: 18px;
      }

      .item i {
        font-size: 24px;
        color: rgb(114, 114, 114);
      }
      .item i:hover {
        background: #e7e7e7;
        border-radius: 5px;
      }

      /* :where()可以快速組合,
選擇所有.item.dragging底下的.details及i元素 */
      .item.dragging :where(.details, i) {
        opacity: 0;
      }

    </style>
  </head>
  <body>
    <%- include ("partials/nav") %>
    <main class="flex flex-col gap-5 items-center py-5">
      <h1 class="text-3xl font-bold"><%=foundStory.title%> | 新增章節</h1>
      <form
        action="/story/<%=foundStory._id%>/newchapter"
        method="POST"
        class="flex flex-col gap-3 items-center"
        enctype="multipart/form-data"
      >
        <%- include ("partials/message") %>
        <div class="flex items-center justify-center w-[800px]">
          <label for="title" class="text-right">標題：</label>
          <input
            name="title"
            type="text"
            id="title"
            class="border-2 leading-8 order-slate-400 rounded-lg w-2/4"
          />
        </div>
        <!-- 上傳封面圖片 -->
        <div class="flex flex-col">
          <input
            type="file"
            name="cover"
            id="imagefile"
            accept=".jpg, .jpeg, .png"
            style="display: none"
          />
          <label
            id="cover-container"
            for="imagefile"
            class="border-4 cursor-pointer p-8 rounded-lg text-2xl font-bold text-zinc-400 bg-cover bg-center w-[300px] h-[200px] flex items-center justify-center"
            >上傳章節封面</label
          >
        </div>

        <!-- 上傳多張內容圖片 -->
        <div class="mt-3">
          <div class="flex justify-between items-center">
            <label
            for="pageInput"
            class="flex bg-black text-white py-2 px-5 justify-center items-center cursor-pointer rounded-lg w-[120px]"
            >上傳圖片</label
          >
          <p>頁數 <span class="pageCount">0</span></p>

          </div>         
          <input
            name="content"
            type="file"
            id="pageInput"
            accept=".jpg, .jpeg, .png"
            class="border-2 leading-8 order-slate-400 rounded-lg w-2/4 hidden"
            multiple
          />

          <ul class="sortable-list mt-3 flex flex-wrap gap-3"></ul>
          
        </div>

        <button
          type="submit"
          class="bg-orange-600 py-2 px-5 rounded-lg text-white w-[300px] font-bold"
        >
          新增
        </button>
      </form>
    </main>

    <script>
      let files = [];
      const coverContainer = document.querySelector("#cover-container");
      const fileInput = document.querySelector("#imagefile");
      const pageInput = document.querySelector("#pageInput");
      const sortableList = document.querySelector(".sortable-list");
      const pageCount = document.querySelector(".pageCount");
      

      pageInput.addEventListener("change", () => {
        let file = pageInput.files;
        for (let i = 0; i < file.length; i++) {
          if (files.every((e) => e.name != file[i].name)) files.push(file[i]);
          //防止同名檔案上傳          
        }
        showImages();
      });

      const showImages = () => {
        let images = "";
        files.forEach((e, i) => {
          images += `
          <li class="item" draggable="true">
            <div class="details">
              <span onclick="delImage(${i})" class="mr-1">&times;</span>
              <img src=${URL.createObjectURL(e)} alt="章節頁數"/>
              <span class="img-name">${e.name}</span>
            </div>
            <i class="uil uil-draggabledots"></i>
          </li>`;
        });
        sortableList.innerHTML = images;
        pageCount.innerHTML = files.length;

        const items = sortableList.querySelectorAll(".item");
        items.forEach((item) => {
        item.addEventListener("dragstart", () => {
          //稍微延遲附加dragging樣式 , 讓抓起來的內容物不會消失
          setTimeout(() => item.classList.add("dragging"), 0);
        });

        item.addEventListener("dragend", () => {
          item.classList.remove("dragging");

          const items = [...sortableList.querySelectorAll(".item")];
          const updatedFiles = items.map((updatedItem) => {                
          const fileName = updatedItem.querySelector(".img-name").textContent;
              return files.find((file) => file.name === fileName);                
          });
          files = updatedFiles; //改變files的順序
          
        });
      });
      };
      //刪除圖片
      const delImage = (index) => {
        files.splice(index, 1);
        showImages();
      };     

      const initSortableList = (e) => {
        e.preventDefault();
        const draggingItem = sortableList.querySelector(".dragging");
        //除了正在抓取的item 把剩下的重新排列
        const siblings = [...sortableList.querySelectorAll(".item:not(.dragging)")];

        //找到抓取的item後方的item 他會遞補被抓取item的位置
        let nextSibling = siblings.find((sibling) => {
          return e.clientY <= sibling.offsetTop + sibling.offsetHeight / 2;
        });

        sortableList.insertBefore(draggingItem, nextSibling);
      };

      sortableList.addEventListener("dragover", initSortableList);
      //避免出現禁止符號
      sortableList.addEventListener("dragenter", (e) => e.preventDefault());


      //章節封面
      fileInput.addEventListener("change", function (e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            coverContainer.style.backgroundImage = `url('${e.target.result}')`;
            coverContainer.innerText = "更換圖片";
          };

          reader.readAsDataURL(file);
        }
      });

      //獲取表單
      const form = document.querySelector("form");
      form.addEventListener('submit', (e) => {

        e.preventDefault(); 
        const formData = new FormData();        
        
        files.forEach(file => {    
          formData.append('content', file); // 直接將文件添加到 FormData 中          
          formData.append('alt', file.name); // 添加對應的 alt 文本 
        });

          const cover = fileInput.files[0];
          formData.append('cover', cover);

          const title = document.getElementById('title').value;
          formData.append('title', title);

          fetch('/story/<%=foundStory.type%>-<%=foundStory.number%>/newchapter', {
            method: 'POST',
            body: formData
          })
          .then(res => { //要收到後端的return才會生效
            console.log("上傳成功");
            window.location.href = '/story/<%=foundStory.type%>-<%=foundStory.number%>/edit'; // 重定向到編輯頁面
          })
          .catch(err => {
            console.log(err);
          });
      })      
    </script>
  </body>
</html>
